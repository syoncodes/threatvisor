'use client';

import React, { useEffect, useState } from 'react';
import axios from 'axios';
import Container from '@mui/material/Container';
import { useAuthContext } from 'src/auth/hooks';
import { useSettingsContext } from 'src/components/settings';
import AppNewInvoice22 from '../app-new-invoice-copy2';

const API_BASE_URL = 'http://localhost:8080/api';

export default function VulnerabilityDetails() {
  const { user } = useAuthContext();
  const settings = useSettingsContext();
  const [loading, setLoading] = useState(true);
  const [vulnerabilityDetails, setVulnerabilityDetails] = useState([]);
  const [expandedRow, setExpandedRow] = useState(null);

  useEffect(() => {
    const fetchVulnerabilityDetails = async () => {
      if (!user?.email) {
        console.log('User email is not available');
        setLoading(false);
        return;
      }
      setLoading(true);
      try {
        const response = await axios.post(`${API_BASE_URL}/endpoints/getVulnerabilityDetails2`, { userEmail: user.email });
        const vulnerabilities = response.data.vulnerabilities || {};
        const vulnerabilitiesArray = Object.entries(vulnerabilities).reduce((acc, [severity, issues]) => {
          Object.entries(issues).forEach(([issueName, details]) => {
            acc.push(...details.locations.map((location, index) => ({
              id: `${issueName}-${location}-${details.dates[index]}`,
              title: issueName,
              location: location,
              severity: severity,
              date: details.dates[index] || new Date().toISOString().split('T')[0],
              description: details.description,
              solution: details.solution,
              occurrences: details.occurrences
            })));
          });
          return acc;
        }, []);
        setVulnerabilityDetails(vulnerabilitiesArray);
      } catch (error) {
        console.error('Error fetching vulnerability details:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchVulnerabilityDetails();
  }, [user?.email]);

  const toggleRow = (id) => {
    setExpandedRow(expandedRow === id ? null : id);
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <Container maxWidth={settings.themeStretch ? false : 'xl'}>
      <AppNewInvoice22
        title="Vulnerability Details"
        tableData={vulnerabilityDetails}
        expandedRow={expandedRow}
        onRowToggle={toggleRow}
        tableLabels={[
          { id: 'title', label: 'Vulnerability' },
          { id: 'location', label: 'Location' },
          { id: 'severity', label: 'Severity' },
          { id: 'date', label: 'Date' },
          { id: '', label: '' },
        ]}
      />    
    </Container>
  );
}
