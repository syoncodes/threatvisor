'use client';

// @mui
import { useTheme } from '@mui/material/styles';
import Stack from '@mui/material/Stack';
import Button from '@mui/material/Button';
import Container from '@mui/material/Container';
import Grid from '@mui/material/Unstable_Grid2';
import React, { useEffect, useRef, useState } from 'react';
// hooks
import { useAuthContext } from 'src/auth/hooks';
// _mock
import { _appFeatured, _appAuthors, _appInstalled, _appRelated, _appInvoices } from 'src/_mock';
import {
  _analyticTasks,
  _analyticPosts,
  _analyticTraffic,
  _analyticOrderTimeline,
} from 'src/_mock';
// components
import { useSettingsContext } from 'src/components/settings';
// assets

import AppNewInvoice3 from '../app-new-invoice-copy3';

import axios from 'axios';

const API_BASE_URL = 'https://threatvisor-api.vercel.app/api';



export const fetchVulnerabilities = async (userEmail) => {
  const endpoint = `${API_BASE_URL}/endpoints/getVulnerabilities`;

  const requestBody = {
    email: userEmail,
  };

  console.log('Sending request to:', endpoint);
  console.log('Request body:', requestBody);

  try {
    const response = await axios.post(endpoint, requestBody);
    return response.data;
  } catch (error) {
    console.error('Error fetching vulnerabilities: ', error);
    return [];
  }
};
// ----------------------------------------------------------------------

export default function Exploits() {
  const { user } = useAuthContext();
  console.log("User object:", user);
  const theme = useTheme();

  const settings = useSettingsContext();

  const vulnerabilityDetailsRef = useRef(null);
  const vulnerabilityInfoRef = useRef(null);

  // Function to adjust heights
  const adjustHeights = () => {
    if (vulnerabilityDetailsRef.current && vulnerabilityInfoRef.current) {
      const detailsHeight = vulnerabilityDetailsRef.current.clientHeight;
      const infoHeight = vulnerabilityInfoRef.current.clientHeight;

      if (detailsHeight > infoHeight) {
        vulnerabilityInfoRef.current.style.height = `${detailsHeight}px`;
      } else {
        vulnerabilityDetailsRef.current.style.height = `${infoHeight}px`;
      }
    }
  };

  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [vulnerabilitiesData, setVulnerabilitiesData] = useState(null);

  const [loading, setLoading] = useState(true);

  // Client-side: React with useState and useEffect

const [vulnerabilityLogData, setVulnerabilityLogData] = useState([]);
const MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

useEffect(() => {
  const fetchVulnerabilityLog = async () => {
    if (!user?.email) {
      console.log('User email is not available');
      setLoading(false); // Set loading to false if user email is not available
      return;
    }

    setLoading(true); // Set loading to true when the data fetching begins

    try {
      const response = await axios.post('https://threatvisor-api.vercel.app/api/endpoints/getVulnerabilityLog', {
        userEmail: user.email,
      });

      // Log the response data as "vuln logs"
      const logData = response.data.vulnerabilityLog;

    // Initialize arrays for each severity level
    const highData = new Array(12).fill(0);
    const mediumData = new Array(12).fill(0);
    const lowData = new Array(12).fill(0);
    const informationalData = new Array(12).fill(0);

    // Aggregate data for each month
    logData.forEach(entry => {
      const entryDate = new Date(entry.date);
      const monthIndex = entryDate.getMonth(); // 0 for Jan, 1 for Feb, etc.
      highData[monthIndex] += entry.High;
      mediumData[monthIndex] += entry.Medium;
      lowData[monthIndex] += entry.Low;
      informationalData[monthIndex] += entry.Informational;
    });
    const formattedData = {
      categories: MONTHS,
      series: [
        {
          year: '2023', // Adjust as needed
          data: [
            { name: 'High', data: highData },
            { name: 'Medium', data: mediumData },
            { name: 'Low', data: lowData },
            { name: 'Informational', data: informationalData },
            // ... add other series if necessary
          ],
        },
        // ... add other years if necessary
      ],
    };
      

setVulnerabilityLogData(formattedData);


      setVulnerabilityLogData(formattedData);
    } catch (error) {
      console.error('Error fetching vulnerability log:', error);
    } finally {
      setLoading(false); // Set loading to false once the data is fetched or if there is an error
    }
  };

  fetchVulnerabilityLog();
}, [user?.email]); // Make sure this dependency is correct, it should be user?.email, not user?. Email


// In your component's render method or function component body
// Use the vulnerabilityLogData state variable to pass the data to your chart component


const [exploitDetails, setExploitDetails] = useState([]);
  const MAX_EXPLOIT_ROWS = 5;

  useEffect(() => {
    const fetchExploitDetails = async () => {
      const response = await axios.post(`${API_BASE_URL}/endpoints/getExploitDetails`, {
        userEmail: user.email,
      });
      
      const exploitData = response.data.exploits || {};
      const exploitArray = Object.entries(exploitData).flatMap(([cveId, exploitDetails]) => {
        return exploitDetails.map(detail => ({
          id: cveId,
          title: detail.title,
          content: detail.content,
          source: detail.source,
          link: detail.link, // Include link
          location: detail.location,
          date: detail.date,
        }));
      });
      setExploitDetails(exploitArray);
    };
  
    fetchExploitDetails();
  }, [user?.email]);



  
  if (loading) {
    return <div>Loading...</div>; // Show a loading indicator or a spinner
  }

  return (
    <Container maxWidth={settings.themeStretch ? false : 'xl'}>
      
        

        

        

        

        
        

    
      <AppNewInvoice3
            title="Exploits"
            tableData={exploitDetails}
            tableLabels={[
              { id: 'title', label: 'CVE ID' },
              { id: 'content', label: 'Content', align: 'left' },
              { id: 'location', label: 'Location URL' },
              { id: 'date', label: 'Date', align: 'left' },
              { id: ' ', label: ' ', align: 'left' },
            ]}
          />

        

      
    </Container>
  );
}
